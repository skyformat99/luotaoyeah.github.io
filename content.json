{"meta":{"title":"LUOTAO'S BLOG","subtitle":null,"description":null,"author":"luotao","url":"http://luotao.me"},"pages":[{"title":"","date":"2019-02-22T12:54:36.583Z","updated":"2019-02-22T12:54:36.570Z","comments":false,"path":"tags/index.html","permalink":"http://luotao.me/tags/index.html","excerpt":"","text":""},{"title":"","date":"2019-02-22T12:54:36.687Z","updated":"2019-02-22T12:54:36.674Z","comments":false,"path":"categories/index.html","permalink":"http://luotao.me/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"如何在 macOS 上使用 Homebrew 安装 Redis","slug":"how-to-install-redis-on-mac-using-brew","date":"2018-02-05T12:07:00.000Z","updated":"2019-02-22T08:10:15.335Z","comments":true,"path":"2018/02/05/how-to-install-redis-on-mac-using-brew/","link":"","permalink":"http://luotao.me/2018/02/05/how-to-install-redis-on-mac-using-brew/","excerpt":"","text":"0. 环境 macOS v10.13.3 Homebrew v1.6.0 Redis v4.0.9 1. 安装 Redis1.1. 查看 Redis 版本 1.2. 安装 Redis 1.3. 启动 Redis 1.4. 测试 Redis 是否运行","categories":[{"name":"REDIS","slug":"REDIS","permalink":"http://luotao.me/categories/REDIS/"}],"tags":[{"name":"mac","slug":"mac","permalink":"http://luotao.me/tags/mac/"},{"name":"homebrew","slug":"homebrew","permalink":"http://luotao.me/tags/homebrew/"},{"name":"redis","slug":"redis","permalink":"http://luotao.me/tags/redis/"}]},{"title":"如何在 macOS 上使用 Homebrew 安装 MySQL","slug":"how-to-install-mysql-on-mac-using-brew","date":"2018-02-01T13:08:02.000Z","updated":"2019-02-22T12:54:36.642Z","comments":true,"path":"2018/02/01/how-to-install-mysql-on-mac-using-brew/","link":"","permalink":"http://luotao.me/2018/02/01/how-to-install-mysql-on-mac-using-brew/","excerpt":"","text":"0. 环境 macOS v10.13.3 Homebrew v1.6.0 MySQL v5.7.21 1. 安装 Homebrew 2. 安装 MySQL2.1. 查看 MySQL 版本 2.2. 安装 MySQL 3. 后续配置3.1. 安装 Homebrew 服务 3.2. 查看所有 Homebrew 服务 3.3. 启动 MySQL 服务 3.4. 查看 MySQL 版本 3.5. 设置 root 密码 3.6. 停止 MySQL 服务","categories":[{"name":"MYSQL","slug":"MYSQL","permalink":"http://luotao.me/categories/MYSQL/"}],"tags":[{"name":"mac","slug":"mac","permalink":"http://luotao.me/tags/mac/"},{"name":"homebrew","slug":"homebrew","permalink":"http://luotao.me/tags/homebrew/"},{"name":"mysql","slug":"mysql","permalink":"http://luotao.me/tags/mysql/"}]},{"title":"Vue.js 逐步迁移到 TypeScript","slug":"vue-migrate-to-ts","date":"2018-01-02T13:08:02.000Z","updated":"2019-02-22T12:54:36.623Z","comments":true,"path":"2018/01/02/vue-migrate-to-ts/","link":"","permalink":"http://luotao.me/2018/01/02/vue-migrate-to-ts/","excerpt":"","text":"0. WHY ?JavaScript 自有其作为动态语言的优势，但在面对增长越来越快，代码量越来越大的复杂应用时，其缺陷与不足也越来越明显，所谓”动态类型一时爽，代码重构火葬场”；而 TypeScript 作为 JavaScript 的超集，其引入的诸多特性，使得构建大型复杂应用成为可能。 从一开始就使用 TypeScript 来构建应用自然是最好的选择，如果应用一开始是使用 JavaScript 来构建，当增长到一定规模时，想要迁移到 TypeScript 应该如何实现呢 ? 1. 前置条件本文假设原有项目是基于 vue-cli 的 webpack 模板进行搭建的。 2. 原理在原有的基于 webpack 打包构建的流程之上，引入单独的处理器对 TypeScript 文件进行处理，实现 js 文件与 ts 文件共存且分别进行处理，从而实现 JavaScript 到 TypeScript 的逐步迁移。经过改造之后的项目将具备以下特性： js 文件和 ts 文件可以共存，互不影响； js 模块和 ts 模块可以相互引用； 支持单文件组件（SFC）迁移到 ts； 3. 配置3.1. 安装相关依赖 3.2. 修改 webpack 配置 resolve.extensions 添加 .ts； 针对 ts 文件添加一个 rule； 3.3. 添加 tsconfig.json 配置文件在根目录添加配置文件 tsconfig.json： 其中配置项 include 使用了通配符：[&quot;./src/**/*&quot;]，这样就实现了只有 ts 相关的文件才会被 TypeScript 处理； If a segment of a glob pattern includes only * or .*, then only files with supported extensions are included (e.g. .ts, .tsx, and .d.ts by default with .js and .jsx if allowJs is set to true). https://www.typescriptlang.org/docs/handbook/tsconfig-json.html 3.4. 添加类型定义文件 在根目录新建文件夹 types，用来存放类型定义文件； 添加类型定义文件 shim-vue.d.ts： 4. 迁移4.1. js 文件对于 js 文件， 将文件后缀修改为 .ts； 将 js 代码重构为 ts 代码； 4.2. vue 文件对于 vue 文件， 将 script 标签中的 js 代码分离到单独的 .ts 文件； 将 js 代码重构为 ts 代码； 在 vue 文件引入该 .ts 文件；","categories":[{"name":"VUE.JS","slug":"VUE-JS","permalink":"http://luotao.me/categories/VUE-JS/"}],"tags":[{"name":"vue","slug":"vue","permalink":"http://luotao.me/tags/vue/"},{"name":"typescript","slug":"typescript","permalink":"http://luotao.me/tags/typescript/"}]},{"title":"使用 Nexus Repository Manager 搭建 NPM 私服","slug":"sonatype-nexus-repository-manager-npm","date":"2017-12-05T09:03:35.000Z","updated":"2019-02-22T12:54:36.739Z","comments":true,"path":"2017/12/05/sonatype-nexus-repository-manager-npm/","link":"","permalink":"http://luotao.me/2017/12/05/sonatype-nexus-repository-manager-npm/","excerpt":"","text":"0. WHY ?网络环境太差的时候，使用 npm install 安装项目依赖是一件特别痛苦的事情。想到我以前使用 Nexus 搭建 Maven 私服的经历（Maven 入门指南 ⑤：使用 Nexus 搭建 Maven 私服），我搜索了一下类似的搭建 NPM 私服的方法，发现 Nexus 竟然也同时支持创建 NPM 私服。经验证，效果还不错，强烈推荐大家试用。 0.1 参考文档 Using Nexus 3 as Your Repository – Part 2: npm Packages Node Packaged Modules and npm Registries 1. 创建私有仓库私有仓库是用来发布公司内部或者个人私有项目的地方。项目发布到私有仓库之后，公司内部就可以像使用普通的 NPM 包一样安装 &amp; 更新该项目，同时又不会将项目代码泄露到公共仓库。 创建仓库： 选择 npm (hosted)： 填写名称，并保存： 2. 创建代理仓库代理仓库是用来缓存远程仓库依赖的地方。通过代理仓库安装项目依赖时，Nexus 首先会查找代理仓库，如果找到该依赖，则直接从代理仓库下载该依赖到本地；如果没找到该依赖，则首先从远程仓库（http://registry.npmjs.org/）下载该依赖到本地，并将该依赖缓存到代理仓库，以后再次安装依赖时，就直接从代理仓库下载。 创建仓库： 选择 npm (proxy)： 填写名称及远程仓库地址 http://registry.npmjs.org/，并保存： 3. 创建仓库分组仓库分组用来将多个仓库（上面创建的私有仓库和代理仓库）放到一个分组中，然后通过一个唯一的 URL 地址来同时访问这些仓库。 创建仓库： 选择 npm (group)： 填写名称，勾选私有仓库和代理仓库到该分组，并保存： 查看仓库分组信息如下，其中 http://192.168.199.10:8081/repository/npm-group/ 就是我们要使用的唯一仓库 URL： 4. 使用代理仓库安装依赖接下来我们使用刚刚创建的代理仓库来安装项目依赖。 4.1. 通过命令行参数，指定仓库地址npm install --registry http://192.168.199.10:8081/repository/npm-group/ --verbose 可以看到已经开始从代理仓库下载依赖： 4.2. 修改 NPM 配置通过修改 NPM 配置使用代理仓库，这样不用每次运行 npm install 时都需要通过参数指定仓库地址。可以使用命令或者直接修改配置文件。 4.2.1. 使用命令修改 NPM 配置npm config set registry http://192.168.199.10:8081/repository/npm-group/ 4.2.2. 直接修改 NPM 配置文件# NPM 用户配置文件：C:/Users/[用户名]/.npmrcregistry=http://192.168.199.10:8081/repository/npm-group/ 5. 发布项目到私有仓库发布项目到私有仓库，需要首先配置权限认证。 5.1. 生成 auth hash使用命令 echo -n &#39;username:password&#39; | openssl base64 来生成 auth hash： 5.2. 修改 NPM 配置文件registry=http://192.168.199.10:8081/repository/npm-group/email=luotaoyeah@gmail.comalways-auth=true_auth=\"YWRtaW46YWRtaW4=\" 5.3. 发布项目两种方式指定发布到的仓库地址，命令参数或者配置 package.json： 5.3.1. 通过命令行参数，指定发布仓库地址npm publish --registry http://192.168.199.10:8081/repository/npm-group/ 5.3.2. 修改 package.json，指定发布仓库地址修改 package.json 中 publishConfig 配置，指定发布地址： \"publishConfig\": &#123; \"registry\": \"http://192.168.199.10:8081/repository/npm-private/\"&#125; 然后直接执行发布命令 npm publish 即可，项目成功发布到私有仓库：","categories":[{"name":"NODE.JS","slug":"NODE-JS","permalink":"http://luotao.me/categories/NODE-JS/"}],"tags":[{"name":"nodejs","slug":"nodejs","permalink":"http://luotao.me/tags/nodejs/"},{"name":"npm","slug":"npm","permalink":"http://luotao.me/tags/npm/"},{"name":"nexus","slug":"nexus","permalink":"http://luotao.me/tags/nexus/"}]},{"title":"Vue.js 配置 Flowtype 静态类型检查","slug":"vue-flowtype","date":"2017-08-02T12:07:37.000Z","updated":"2019-02-22T12:54:36.771Z","comments":true,"path":"2017/08/02/vue-flowtype/","link":"","permalink":"http://luotao.me/2017/08/02/vue-flowtype/","excerpt":"","text":"1. Flowtype 是什么 ?Flowtype 是 Facebook 开源的一款针对 Javascript 的静态类型检查工具。Flowtype 的出现弥补了 Javascript 作为一种动态类型语言先天性的类型系统缺陷，使用 Flowtype 对现有的代码进行类型标注之后，Flowtype 可以在编译时进行类型检查，避免很多运行时才能发现的错误。 Vue.js 从 2.0 开始采用了 Flowtype，作者尤雨溪在知乎上对为什么使用 Flowtype 有一篇回答：Vue2.0 为什么选用 Flow 进行静态代码检查而不是直接使用 TypeScript ? 2. 如何在基于 Vue.js 的项目中使用 Flowtype ? 本文示例项目使用 vue-cli 的 webpack-simple 模板搭建。 2.1 安装依赖包 安装 Babel 相关依赖包： 安装 ESLint 相关依赖包： 安装 Flowtype 相关依赖包： 2.2 配置插件项目根目录下已经存在.babelrc和.eslintrc.js配置文件，更新配置如下： .flowconfig需要手动添加，或者在项目根目录执行flow init来生成。 2.3 设置 IDEIntellij IDEA（或 WebStorm） 对 Flowtype 提供了很好的支持，结合官方的 Vue.js 插件，编写 Vue.js 单文件组件变得特别方便。 2.3.1 启用 Node.js and NPM 2.3.2 设置 Javascript 语言版本为 FlowWebStorm 官方帮助文档 2.3.3 设置 Flowtype 相关 Inspection 2.4 使用 Flowtype在 .vue 文件 script 块中，添加注释/* @flow */或者// @flow来启用 Flowtype： 此时 IDE 检测到文件变化时，会自动运行 ESLint；由于我们配置了 ESLint 和 Flowtype 集成的相关插件，Flowtype errors 会以 ESLint errors 的形式实时地显示到控制台，而不用手动运行flow check命令：","categories":[{"name":"VUE.JS","slug":"VUE-JS","permalink":"http://luotao.me/categories/VUE-JS/"}],"tags":[{"name":"vue","slug":"vue","permalink":"http://luotao.me/tags/vue/"},{"name":"flowtype","slug":"flowtype","permalink":"http://luotao.me/tags/flowtype/"}]},{"title":"Maven 入门指南 ⑦ ：Maven 的生命周期和插件","slug":"maven-guide-07","date":"2014-07-01T13:04:34.000Z","updated":"2019-02-22T12:54:36.754Z","comments":true,"path":"2014/07/01/maven-guide-07/","link":"","permalink":"http://luotao.me/2014/07/01/maven-guide-07/","excerpt":"","text":"Maven 入门指南 ⑦：Maven 的生命周期和插件 - 罗韬 - 博客园","categories":[{"name":"MAVEN","slug":"MAVEN","permalink":"http://luotao.me/categories/MAVEN/"}],"tags":[{"name":"maven","slug":"maven","permalink":"http://luotao.me/tags/maven/"}]},{"title":"Maven 入门指南 ⑥ ：将项目发布到私服","slug":"maven-guide-06","date":"2014-06-30T15:20:34.000Z","updated":"2019-02-22T12:54:36.656Z","comments":true,"path":"2014/06/30/maven-guide-06/","link":"","permalink":"http://luotao.me/2014/06/30/maven-guide-06/","excerpt":"","text":"Maven 入门指南 ⑥：将项目发布到私服 - 罗韬 - 博客园","categories":[{"name":"MAVEN","slug":"MAVEN","permalink":"http://luotao.me/categories/MAVEN/"}],"tags":[{"name":"maven","slug":"maven","permalink":"http://luotao.me/tags/maven/"}]},{"title":"Maven 入门指南 ⑤ ：使用 Nexus 搭建 Maven 私服","slug":"maven-guide-05","date":"2014-06-16T22:37:34.000Z","updated":"2019-02-22T12:54:36.587Z","comments":true,"path":"2014/06/17/maven-guide-05/","link":"","permalink":"http://luotao.me/2014/06/17/maven-guide-05/","excerpt":"","text":"Maven 入门指南 ⑤：使用 Nexus 搭建 Maven 私服 - 罗韬 - 博客园","categories":[{"name":"MAVEN","slug":"MAVEN","permalink":"http://luotao.me/categories/MAVEN/"}],"tags":[{"name":"maven","slug":"maven","permalink":"http://luotao.me/tags/maven/"}]},{"title":"Maven 入门指南 ④ ：仓库","slug":"maven-guide-04","date":"2014-06-16T15:01:34.000Z","updated":"2019-02-22T12:54:36.519Z","comments":true,"path":"2014/06/16/maven-guide-04/","link":"","permalink":"http://luotao.me/2014/06/16/maven-guide-04/","excerpt":"","text":"Maven 入门指南 ④：仓库 - 罗韬 - 博客园","categories":[{"name":"MAVEN","slug":"MAVEN","permalink":"http://luotao.me/categories/MAVEN/"}],"tags":[{"name":"maven","slug":"maven","permalink":"http://luotao.me/tags/maven/"}]},{"title":"Maven 入门指南 ③ ：坐标和依赖","slug":"maven-guide-03","date":"2014-06-12T18:00:00.000Z","updated":"2019-02-22T12:54:36.539Z","comments":true,"path":"2014/06/13/maven-guide-03/","link":"","permalink":"http://luotao.me/2014/06/13/maven-guide-03/","excerpt":"","text":"Maven 入门指南 ③：坐标和依赖 - 罗韬 - 博客园","categories":[{"name":"MAVEN","slug":"MAVEN","permalink":"http://luotao.me/categories/MAVEN/"}],"tags":[{"name":"maven","slug":"maven","permalink":"http://luotao.me/tags/maven/"}]},{"title":"Maven 入门指南 ② ：Maven 常用命令 & 手动创建第一个 Maven 项目","slug":"maven-guide-02","date":"2014-06-06T14:30:34.000Z","updated":"2019-02-22T12:54:36.501Z","comments":true,"path":"2014/06/06/maven-guide-02/","link":"","permalink":"http://luotao.me/2014/06/06/maven-guide-02/","excerpt":"","text":"Maven 入门指南 ② ：Maven 常用命令，手动创建第一个 Maven 项目 - 罗韬 - 博客园","categories":[{"name":"MAVEN","slug":"MAVEN","permalink":"http://luotao.me/categories/MAVEN/"}],"tags":[{"name":"maven","slug":"maven","permalink":"http://luotao.me/tags/maven/"}]},{"title":"Maven 入门指南 ① ：Maven 快速入门及简单使用","slug":"maven-guide-01","date":"2014-06-02T12:07:37.000Z","updated":"2019-02-22T12:54:36.692Z","comments":true,"path":"2014/06/02/maven-guide-01/","link":"","permalink":"http://luotao.me/2014/06/02/maven-guide-01/","excerpt":"","text":"0. 开发环境 MyEclipse 2014 JDK 1.8 Maven 3.2.1 1. 什么是 Maven ？Maven 是一个 Java 语言编写的开源项目管理工具，是 Apache 软件基金会的顶级项目。主要用于项目构建，依赖管理，项目信息管理。 2. 下载及安装 下载：apache-maven-3.2.1-bin.zip； 解压： 配置环境变量（需要先配置好 %JAVA_HOME% 环境变量）： mvn -v 检查环境变量是否配置成功： 配置文件 settings.xml： %MAVEN_HOME%/conf 目录下的 settings.xml，该配置文件针对系统所有用户： 用户目录下 .m2 下的 settings.xml，针对当前用户；默认没有，可自行复制一份： 3. Maven 项目的目录结构 src/main/java ： 存放项目.java 文件； src/main/resources ： 存放项目资源文件； src/test/java ： 存放测试类.java 文件； src/test/resources ： 存放测试资源文件； target ： 项目输出目录； pom.xml ： Maven 核心文件（Project Object Model）； 4. 使用 MyEclipse 创建 Maven 项目 MyEclipse 提供了 Maven4MyEclipse 插件，已经内置安装了 Maven；但我们通常使用自己下载配置的 Maven，在 Installations 选项中添加我们刚才下载配置的 Maven。Eclipse 可自行安装 m2eclipse 插件。 新建一个 Maven Project： 选择 Workbench Location： 选择 Maven Archetype，这里我们选择 maven-archetype-webapp： 设置 Maven 相关参数，Group Id，Artifact Id，Version，Package，它们共同组成 Maven 的坐标： 5. 后续配置项目创建成功之后，我们看到 MyEclipse 默认只为我们创建了 src/main/resources，打开项目属性 - Java Build Path - Source 一栏，可看到 src/main/java 和 src/test/java 显示 missing： 打开 Libraries，编辑 JRE 环境，选择自己安装的 JDK： 这时，src/main/java 和 src/test/java 已经出来了，再自行添加 src/test/resources 目录： 接下来，设置 Project Facets。选择 Java 1.7 版本和 Dynamic Web Module 3.1 版本： 设置项目输出目录如下： 设置部署打包结构如下，删除测试相关目录： 6. 在 pom.xml 文件中添加相关 jar 包依赖打开 pom.xml 文件，我们看到 Maven 已经为我们添加了 JUnit3.8.1 的依赖，这里我们改成 JUnit 4.11，同时添加 servlet-api 的依赖包： 保存之后，自动为我们添加了相关 jar 包。这时最开始缺少 servlet-api 相关类的错误提示已经没有了： 7. 构建及部署右键 pom.xml - Run As - Maven -install： 打开 target 文件夹，我们看到生成了项目的部署文件： 部署项目到 Tomcat 应用服务器，访问项目：","categories":[{"name":"MAVEN","slug":"MAVEN","permalink":"http://luotao.me/categories/MAVEN/"}],"tags":[{"name":"maven","slug":"maven","permalink":"http://luotao.me/tags/maven/"}]},{"title":"Eclipse / MyEclipse 添加 JDK API 帮助文档","slug":"eclipse-jdk-api","date":"2014-04-18T17:00:02.000Z","updated":"2018-04-07T01:24:10.000Z","comments":true,"path":"2014/04/19/eclipse-jdk-api/","link":"","permalink":"http://luotao.me/2014/04/19/eclipse-jdk-api/","excerpt":"","text":"1. 下载解压下载：Java SE Development Kit 8 Documentation； 2. 配置 3. 使用鼠标光标定位到要查询的代码处，F1 打开 Help 标签页，点击 Javadoc for &#39;xxx.xxx&#39;；","categories":[{"name":"OTHER","slug":"OTHER","permalink":"http://luotao.me/categories/OTHER/"}],"tags":[{"name":"eclipse","slug":"eclipse","permalink":"http://luotao.me/tags/eclipse/"}]},{"title":"ASP.NET MVC 4 使用 Uploadify 文件上传插件","slug":"asp-net-mvc-uploadify","date":"2013-09-14T04:47:02.000Z","updated":"2019-02-22T12:54:36.605Z","comments":true,"path":"2013/09/14/asp-net-mvc-uploadify/","link":"","permalink":"http://luotao.me/2013/09/14/asp-net-mvc-uploadify/","excerpt":"","text":"1. 下载官网下载免费的 Flash 版本的开发包：http://www.uploadify.com/download/； 2. 解压解压后，需要用到下面几个文件： 3. 前端配置3.1. 页面添加 CSS 和 JS 引用 3.2. 添加上传按钮标签 3.3. 初始化插件 4. 后端代码 5. 参数说明 uploader: &#39;/article/upload&#39; 请求地址，对应后端进行处理的 Action； formData:{ &quot;imgType&quot;: &quot;normal&quot; } 动态设置表单数据，一般在 onUploadStart 事件中进行处理： 如果参数名与初始化的 formData 中的参数名一样，参数值将被覆盖，否则添加；在开始上传之前执行动态设置都是可以的，例如在两个 checkbox（使用 bootstrap-switch 插件）的状态切换时进行设置： onUploadSuccess 事件处理函数的 3 个参数： file 包含原始文件的信息； response 后台返回（true 或 false）； data 后台返回数据，试例中为 JSON 对象； 其他详细参数，请参考官方文档：http://www.uploadify.com/documentation/ 6. 效果预览","categories":[{"name":"ASP.NET","slug":"ASP-NET","permalink":"http://luotao.me/categories/ASP-NET/"}],"tags":[{"name":"asp.net","slug":"asp-net","permalink":"http://luotao.me/tags/asp-net/"},{"name":"uploadify","slug":"uploadify","permalink":"http://luotao.me/tags/uploadify/"}]},{"title":"EasyUI Accordion 的 Panel 初始化时全部折叠","slug":"easyui-accordion-panel-collapse","date":"2013-09-10T09:26:00.000Z","updated":"2019-02-22T12:54:36.556Z","comments":true,"path":"2013/09/10/easyui-accordion-panel-collapse/","link":"","permalink":"http://luotao.me/2013/09/10/easyui-accordion-panel-collapse/","excerpt":"","text":"EasyUI Accordion 下面的 Panel 有一个属性 selected，默认值为 false ；若设置为 true，则面板默认展开： 若多个 Panel 的 selected 都设置为 true，或者都设置为 false，则默认展开第一个 Panel；即默认情况下始终有一个面板是展开的，要想初始化时，面板全部折叠，找到的一个解决方法如下： 注释掉 jquery.easyui.min.js 第 3704 行的 _2a0(0); 注：本文 easyui 版本为 1.3.4","categories":[{"name":"JAVASCRIPT","slug":"JAVASCRIPT","permalink":"http://luotao.me/categories/JAVASCRIPT/"}],"tags":[{"name":"easyui","slug":"easyui","permalink":"http://luotao.me/tags/easyui/"}]},{"title":"MS SQL Server 2012 不允许保存更改","slug":"ms-sql-server-cant-save","date":"2012-08-10T08:56:02.000Z","updated":"2018-04-07T01:40:14.000Z","comments":true,"path":"2012/08/10/ms-sql-server-cant-save/","link":"","permalink":"http://luotao.me/2012/08/10/ms-sql-server-cant-save/","excerpt":"","text":"1. 问题在 MS SQL Server 2012 中更改表的设计并保存时出现以下提示： 2. 解决取消勾选”阻止保存要求重新创建表的更改”选项；","categories":[{"name":"SQL SERVER","slug":"SQL-SERVER","permalink":"http://luotao.me/categories/SQL-SERVER/"}],"tags":[{"name":"sql server","slug":"sql-server","permalink":"http://luotao.me/tags/sql-server/"},{"name":"sql","slug":"sql","permalink":"http://luotao.me/tags/sql/"}]},{"title":"MS SQL Server 2012 添加 northwind 和 pubs 示例数据库","slug":"ms-sql-server-add-sample-db","date":"2012-02-25T03:46:02.000Z","updated":"2018-04-08T02:43:36.000Z","comments":true,"path":"2012/02/25/ms-sql-server-add-sample-db/","link":"","permalink":"http://luotao.me/2012/02/25/ms-sql-server-add-sample-db/","excerpt":"","text":"1. 问题默认情况，Microsoft SQL Server 中没有安装 northwind 和 pubs 示例数据库，而在学习 SQL 的时候这两个示例数据库非常有用，我们可以自己下载安装； 下载 SQL2000SampleDb.msi 并安装，在 C 盘生成以下目录： 2. 测试附加这两个数据库，并测试：","categories":[{"name":"SQL SERVER","slug":"SQL-SERVER","permalink":"http://luotao.me/categories/SQL-SERVER/"}],"tags":[{"name":"sql server","slug":"sql-server","permalink":"http://luotao.me/tags/sql-server/"},{"name":"northwind","slug":"northwind","permalink":"http://luotao.me/tags/northwind/"}]}]}